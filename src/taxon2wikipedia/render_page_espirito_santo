#!/usr/bin/env python3

from SPARQLWrapper import SPARQLWrapper, JSON
import pandas as pd
from jinja2 import Template
import sys
from qid2taxobox import *
import pywikibot
from pathlib import Path
from process_reflora import *
import click
import webbrowser

HERE = Path(__file__).parent.resolve()


def get_gbif_ref(qid):
    query = f"""
    SELECT * WHERE {{ 
        wd:{qid} wdt:P846 ?gbif_id .
        wd:{qid} wdt:P225 ?taxon_name . }}
    """
    df = get_rough_df_from_wikidata(query)
    gbif_id = list(df["gbif_id.value"])[0]
    taxon_name = list(df["taxon_name.value"])[0]
    ref = f"""<ref>{{{{Citar web|url=https://www.gbif.org/species/{gbif_id}|titulo={taxon_name}|acessodata=2022-04-18|website=www.gbif.org|lingua=en}}}}</ref>"""
    return ref


@click.command()
@click.argument("taxon-qid")
@click.option("--scope-name", default="planta", help="O escopo do táxon alvo.")
@click.option(
    "--reflora-id", default="search", help="O número do taxon na base Reflora."
)
def main(scope_name: str, taxon_qid: str, reflora_id: str):

    template_path = Path(f"{HERE}/../data/full_query_taxon.rq.jinja")

    t = Template(template_path.read_text())

    query = t.render(taxon=taxon_qid)

    results_df = get_rough_df_from_wikidata(query)

    parent_taxon_label = results_df["parent_taxonLabel.value"][0]
    taxon_name = results_df["taxon_name.value"][0]

    reflora_url = (
        f"""http://servicos.jbrj.gov.br/flora/search/{taxon_name.replace(" ", "_")}"""
    )

    if reflora_id == "search":
        r = requests.get(reflora_url)
        webbrowser.open(reflora_url)
        reflora_id = r.url.split("FB")[-1]
    reflora_data = get_reflora_data(reflora_id)
    try:
        taxon_author_label = results_df["taxon_authorLabel.value"][0]
        description_year = results_df["description_year.value"][0]
    except:
        taxon_author_label = "TEMPORARY REPLACEMENT"
        description_year = "TEMPORARY REPLACEMENT"

    common_name_text = render_common_name(results_df)

    taxobox = get_taxobox(taxon_qid)

    wiki_page = (
        f"""
{taxobox}
'''''{taxon_name}'''''{common_name_text} é uma espécie de  """
        f"[[{scope_name}]] do grupo [[{parent_taxon_label}]]."
        f"""
== Taxonomia ==
A espécie foi decrita em [[{description_year}]] por [[{taxon_author_label}]]. {get_gbif_ref(taxon_qid)}

{get_subspecies_from_reflora(reflora_data)}
{get_synonyms_from_reflora(reflora_data)}
{render_ecology(reflora_data)}
== Conservação ==
A espécie faz parte da [[Lista Vermelha da IUCN|Lista Vermelha]] das espécies ameaçadas do estado do [[Espírito Santo (estado)|Espírito Santo]], no sudeste do [[Brasil]]. <ref>{{{{Citar web|url=https://iema.es.gov.br/especies-ameacadas/fauna_ameacada|titulo=IEMA - Espécies Ameaçadas|acessodata=2022-04-12|website=iema.es.gov.br}}}}</ref>
{render_distribution_from_reflora(reflora_data)}
{render_domains(reflora_data)}
{{{{Referencias}}}}
== Ligações externas ==
* [http://reflora.jbrj.gov.br/reflora/listaBrasil/FichaPublicaTaxonUC/FichaPublicaTaxonUC.do?id=FB6007 '''{taxon_name}''' no projeto Flora e Funga do Brasil]
{{{{Controle de autoridade|colapsar}}}}
{{{{esboço-{scope_name}}}}}

    """
    )

    categories = [
        "Plantas",
        "Flora do Brasil",
        "Flora do Espírito Santo",
        f"Plantas descritas em {description_year}",
        "Wikiconcurso Wiki Loves Espírito Santo (artigos)",
    ]

    for cat in categories:
        wiki_page = (
            wiki_page
            + f"""
[[Categoria:{cat}]]"""
        )

    print("===== Saving wikipage =====")
    filepath = "wikipage.txt"
    with open(filepath, "w+") as f:
        f.write(wiki_page)

    print(
        f"""https://pt.wikipedia.org/wiki/{taxon_name.replace(" ", "_")}?action=edit&veswitched=1"""
    )
    print(
        f"""https://scholar.google.com/scholar?q=%22{taxon_name.replace(" ", "+")}%22+scielo"""
    )

    quit()

    qid = input("If page is created, enter anything to add sitelink. ")

    site = pywikibot.Site("wikidata", "wikidata")
    repo = site.data_repository()
    item = pywikibot.ItemPage(repo, taxon_qid)

    data = [{"site": "ptwiki", "title": taxon_name.replace(" ", "_")}]
    item.setSitelinks(data)


def render_common_name(results_df):
    try:
        common_name = results_df["taxon_common_name_pt.value"][0]
        return f""", também conhecido como '''{common_name}''',"""
    except:
        return ""


if __name__ == "__main__":
    main()
